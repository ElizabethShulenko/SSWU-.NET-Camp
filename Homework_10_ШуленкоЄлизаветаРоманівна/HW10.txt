Task1
S - Single Responsibility Principle:
Клас FileReader. Згідно назви, клас повинен мати функціонал отримання інформації з файлу. Додавати функціонал 
запису у файл порушить принцип єдиної відповідальності.

O - Open closed Principle:
У FCL є клас System.Array. Якщо дати можливість програмістам змінювати цей клас, усі програмісти які будуть використовувати 
цей клас будуть зтикатись з порушенням принципу Single Responsibility, та проблемами версій. Тому принцип Open closed
дає можливість завдяки методам розширення доповнювани функціонал класів тільки у власному коді.

L - Liskov substitution Principle:
Клас HeadPhones, який описує стандартну комплектацію навушників. Клас BluetoothHeadPhones наслідує клас HeadPhones, переймає 
усі методи базового класу та додає функціонал для блютузних варіантів. Підставивши замість HeadPhones клас BluetoothHeadPhones 
система продовжуватиме функціонувати у нормальному режимі, що і виконує принцип Liskov substitution.

I -  Interface Segregation Principle:
Інтерфейс  не повинен мати методи, які не будуть використовуватись. Інтерфкейс IInput містить сигнатуру методу, який 
зчитує звук з мікрофону, інтерфейс IOutput описує метод, який програє звук у навушниках. IInput використовується тільки для 
навушників з мікрофоном, IOutput для навушників без мікрофону. Об'єднавши два інтерфейса порушиться принцип Interface Segregation,
адже навушникам без мікрофону не потрібен метод запису звуку.

D - Dependency Inversion Principle:
Клас HeadPhones наслідує інтерфейс IConnection. Завдяки цьому HeadPhones може вмконувати різні підключення: через блютуз, через інтернет.
Якщо заість інтерфейсу був створений клас BluetoothConnection, так як HeadPhones та BluetoothConnection тепер тісно пов'язані, що
порушує принцип Dependency Inversion.

Task2
Логіка класу Square передбачає, що всі сторони квадрату рівні. Тому користувач не може працювати з квадратом як з прямокутником.
Rectangle r = new Square(); // цей запис буде порушувати принцип Лісков. Взагалі, якщо використання наслідника порушить 
роботу базового класу, наслідування робити не варто.  
З погляду ієрархії спадкування класів, чи буде клас квадрата спадкоємцем класу прямокутник, залежить від поведінки, яку ми 
вимагаємо від цих класів. Залежить від того, як і в яких ситуаціях ми використовуємо цей код.



